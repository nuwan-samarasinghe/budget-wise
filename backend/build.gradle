buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.liquibase:liquibase-core:4.26.0'
  }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id "org.sonarqube" version "6.2.0.5505"
	id 'jacoco'
  id 'org.liquibase.gradle' version "3.0.2"
}

group = 'com.budgetwise'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

spotless {
    java {
        googleJavaFormat()
        eclipse()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

bootRun {
    jvmArgs = [
        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ]
	sourceResources sourceSets.main
}

sonar {
  properties {
    property "sonar.projectKey", "budget-wise-backend"
    property "sonar.organization", "nuwan-samarasinghe"
    property "sonar.host.url", "https://sonarcloud.io"
	property "sonar.java.binaries", "build/classes/java/main"
	property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

configurations {
  liquibaseRuntime.extendsFrom runtimeClasspath
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.liquibase:liquibase-core:4.26.0'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  implementation 'org.modelmapper:modelmapper:3.2.4'
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
  liquibaseRuntime 'org.liquibase:liquibase-core:4.26.0'
  liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
  liquibaseRuntime 'info.picocli:picocli:4.6.1'
  liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.26.0'
  liquibaseRuntime 'org.postgresql:postgresql:42.7.4'
  liquibaseRuntime files(sourceSets.main.output)
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
  implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'net.datafaker:datafaker:2.4.3'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.withType(org.liquibase.gradle.LiquibaseTask).configureEach {
  dependsOn("classes")
}

tasks.register("printLiquibaseRuntime") {
  doLast {
    configurations.liquibaseRuntime.resolve().each { println it }
  }
}

liquibase {
  runList = 'main'
  activities {
    main {
      changelogFile "db/changelog/db.changelog-master.yml"
      url "jdbc:postgresql://localhost:5432/budget_wise"
      username "budget_wise"
      password "budget_wise"
      outputSchemas "public"
      includeSchema false
      referenceUrl """hibernate:spring:com.budgetwise,com.budgetwise.backend.models
        ?dialect=org.hibernate.dialect.PostgreSQLDialect
        &hibernate.default_schema=public
        &hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        &hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"""
    }
  }
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn jacocoTestCoverageVerification